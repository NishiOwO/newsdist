#!/bin/sh
# $Id$

if [ "x$PREFIX" = "x" ]; then
	PREFIX="/usr/local"
fi
VERSION="1.0"

PLATFORM=`uname -s | tr '[:upper:]' '[:lower:]'`-`uname -r | cut -d'.' -f1`

if [ -f "Config/$PLATFORM" ]; then
	. Config/$PLATFORM
fi

stty -echo

for i in $@; do
	case "$i" in
	--prefix=*)
		PREFIX=`echo $i | sed 's/--prefix=//g'`
		;;
	--help)
		echo "This is a configuration utility for NewsDist."
		echo ""
		echo "Usage: $0 [options] [variables] [config]"
		echo ""
		echo "Options:"
		echo "  --prefix=[prefix]     Specifies the prefix"
		echo ""
		echo "Variables:"
		echo "  CC                    C compiler"
		echo "  CFLAGS                Flags to be used at compile-time"
		echo "  LDFLAGS               Flags to be used at link-time"
		echo "  LIBS                  Libraries to be linked"
		echo "  YACC                  Yacc"
		echo "  LEX                   Lex"
		echo ""
		echo "Recognized configs:"
		echo "  `ls -d Config/* | tr '\n' ' '`"
		exit 0
		;;
	--*)
		echo "Unknown flag: $i"
		exit 1
		;;
	*)
		echo $i | grep "=" >/dev/null 2>&1
		if [ "$?" = "0" ]; then
			eval $i
		else
			. $i
		fi
		;;
	esac
done

PRINTF="printf"

OLDIFS="$IFS"
IFS=":"

for i in $PATH; do
	if [ -f $i/printf ]; then
		PRINTF=$i/printf
		break
	fi
done

IFS="$OLDIFS"

input=""
COLOR=1

$PRINTF "\x1b[m" 2>/dev/null
if [ ! "$?" = "0" ]; then
	COLOR=0
fi

error_raw () {
	if [ "$COLOR" = "1" ]; then
		$PRINTF "\x1b[1m\x1b[31m!!!\x1b[m $1"
	else
		$PRINTF "!!! $1"
	fi
}

warn_raw () {
	if [ "$COLOR" = "1" ]; then
		$PRINTF "\x1b[1m\x1b[33m!!!\x1b[m $1"
	else
		$PRINTF "!!! $1"
	fi
}

info_raw () {
	if [ "$COLOR" = "1" ]; then
		$PRINTF "\x1b[1m\x1b[37m???\x1b[m $1"
	else
		$PRINTF "??? $1"
	fi
}

log_raw () {
	if [ "$COLOR" = "1" ]; then
		$PRINTF "\x1b[1m\x1b[37m   \x1b[m $1"
	else
		$PRINTF "    $1"
	fi
}

error () {
	error_raw "$1\n"
}

warn () {
	warn_raw "$1\n"
}

info () {
	info_raw "$1\n"
}

log () {
	log_raw "$1\n"
}

quit () {
	log ""
	error 'Configuration aborted.'
	rm -f config.h
	rm -f config.mk
	stty echo
	exit 1
}

getinput () {
	default="$2"
	while true; do
		if [ "x$2" = "x" ]; then
			if [ "$COLOR" = "1" ]; then
				$PRINTF "\x1b[1m\x1b[34m???\x1b[m $1? "
			else
				$PRINTF "??? $1? "
			fi
		else
			if [ "$COLOR" = "1" ]; then
				$PRINTF "\x1b[1m\x1b[34m???\x1b[m $1 [$default]? "
			else
				$PRINTF "??? $1 [$default]? "
			fi
		fi
		stty echo
		read input || quit
		stty -echo
		if [ "x$input" = "x" -a "x$default" = "x" ]; then
			error "There is no default value"
		elif [ "x$input" = "x" -a ! "x$default" = "x" ]; then
			input="$default"
			break
		elif [ ! "x$input" = "x" ]; then
			break
		fi
	done
}

test_c () {
	result=0
	rm -f /tmp/$$.c
	$PRINTF "$1" > /tmp/$$.c
	if [ "x$2" = "x" ]; then
		$CC $CFLAGS -Werror -c -o /tmp/$$.o /tmp/$$.c >/dev/null 2>&1
		if [ "$?" = "0" ]; then
			echo "yes"
		else
			echo "no"
			result=1
		fi
		rm -f /tmp/$$.c /tmp/$$.o
	else
		$CC $CFLAGS $LDFLAGS -Werror -o /tmp/$$ /tmp/$$.c $2 >/dev/null 2>&1
		if [ "$?" = "0" ]; then
			echo "yes"
		else
			echo "no"
			result=1
		fi
		rm -f /tmp/$$.c /tmp/$$
	fi
	return $result
}

DEFINES=""

define () {
	if [ "x$DEFINES" = "x" ]; then
		DEFINES="\"+$1\""
	else
		DEFINES="$DEFINES,\"+$1\""
	fi
	echo "#define $1" >> config.h
}

undef () {
	if [ "x$DEFINES" = "x" ]; then
		DEFINES="\"-$1\""
	else
		DEFINES="$DEFINES,\"-$1\""
	fi
	echo "/* #define $1 */" >> config.h
}

trap quit 2

log ""
log "Welcome to NewsDist build environment configuration utility."
log "NewsDist is a small (enough) NNTP server."
log "         is under public-domain."
log ""

if [ "x$CC" = "x" ]; then
	log_raw "Probing C compiler: "
	for c in gcc clang cc; do
		OLDIFS="$IFS"
		IFS=":"
		for i in $PATH; do
			if [ -f "$i/$c" ]; then
				CC=$i/$c
				echo $CC
				break
			fi
		done
		IFS="$OLDIFS"
		if [ ! "x$CC" = "x" ]; then
			break;
		fi
	done	
fi

if [ "x$CC" = "x" ]; then
	info "GCC/Clang should work."
	getinput "What is your C compiler" "cc"
	CC="$input"
fi

echo "/* This file is auto-generated */" > config.h
echo "#ifndef __NEWSDIST_CONFIG_H__" >> config.h
echo "#define __NEWSDIST_CONFIG_H__" >> config.h

SELECT_H="sys/select.h"
POLL_H="sys/poll.h"
SOCKET_H="sys/socket.h"

log_raw "Checking if Winsock 2 exists: "
if test_c "#include <winsock2.h>\nint main(int argc, char** argv){return 0;}"; then
	define "HAS_WINSOCK"
	SELECT_H="winsock2.h"
	POLL_H="winsock2.h"
	SOCKET_H="winsock2.h"
	LIBS="$LIBS -lws2_32"
else
	undef "HAS_WINSOCK"
fi

log_raw "Is this Linux build: "
if test_c "#ifndef __linux__\n#error no\n#endif"; then
	CFLAGS="$CFLAGS -D_DEFAULT_SOURCE"
fi
log_raw "Checking if select exists: "
if test_c "#include <$SELECT_H>\nint main(int argc, char** argv){void* s = select;return 0;}"; then
	define "HAS_SELECT"
else
	undef "HAS_SELECT"
fi
log_raw "Checking if poll exists: "
if test_c "#include <$POLL_H>\nint main(int argc, char** argv){void* s = poll;return 0;}"; then
	define "HAS_POLL"
else
	undef "HAS_POLL"
fi
log_raw "Checking if AF_INET exists: "
test_c "#include <$SOCKET_H>\nint main(int argc, char** argv){(void)AF_INET;return 0;}" || quit
log_raw "Checking if AF_INET6 exists: "
if test_c "#include <$SOCKET_H>\nint main(int argc, char** argv){(void)AF_INET6;return 0;}"; then
	define "HAS_IPV6"
else
	undef "HAS_IPV6"
fi

log_raw "Checking if strdup exists: "
if test_c "#include <string.h>\nint main(int argc, char** argv){void* s = strdup;return 0;}"; then
	define "HAS_STRDUP"
else
	undef "HAS_STRDUP"
fi

log_raw "Checking if libsocket exists: "
if test_c "int main(int argc, char** argv){return 0;}" "-lsocket"; then
	LIBS="$LIBS -lsocket"
fi

log_raw "Checking if OpenSSL works: "
if test_c "#include <openssl/ssl.h>\nint main(int argc, char** argv){void* s = SSL_CTX_new;return 0;}" "-lcrypto -lssl"; then
	define "HAS_OPENSSL"
	LIBS="$LIBS -lcrypto -lssl"
	SSL="openssl"
	log_raw "Checking if TLS_server_method exists: "
	if test_c "#include <openssl/ssl.h>\nint main(int argc, char** argv){void* s = TLS_server_method;return 0;}"; then
		define "HAS_TLS_SERVER_METHOD"
	else
		undef "HAS_TLS_SERVER_METHOD"
	fi
	log_raw "Checking if SSLv23_server_method exists: "
	if test_c "#include <openssl/ssl.h>\nint main(int argc, char** argv){void* s = SSLv23_server_method;return 0;}"; then
		define "HAS_SSLV23_SERVER_METHOD"
	else
		undef "HAS_SSLV23_SERVER_METHOD"
	fi
	log_raw "Checking if TLSv1_2_server_method exists: "
	if test_c "#include <openssl/ssl.h>\nint main(int argc, char** argv){void* s = TLSv1_2_server_method;return 0;}"; then
		define "HAS_TLSV1_2_SERVER_METHOD"
	else
		undef "HAS_TLSV1_2_SERVER_METHOD"
	fi
	log_raw "Checking if TLSv1_1_server_method exists: "
	if test_c "#include <openssl/ssl.h>\nint main(int argc, char** argv){void* s = TLSv1_1_server_method;return 0;}"; then
		define "HAS_TLSV1_1_SERVER_METHOD"
	else
		undef "HAS_TLSV1_1_SERVER_METHOD"
	fi
	log_raw "Checking if TLSv1_server_method exists: "
	if test_c "#include <openssl/ssl.h>\nint main(int argc, char** argv){void* s = TLSv1_server_method;return 0;}"; then
		define "HAS_TLSV1_SERVER_METHOD"
	else
		undef "HAS_TLSV1_SERVER_METHOD"
	fi
	log_raw "Checking if SSLv3_server_method exists: "
	if test_c "#include <openssl/ssl.h>\nint main(int argc, char** argv){void* s = SSLv3_server_method;return 0;}"; then
		define "HAS_SSLV3_SERVER_METHOD"
	else
		undef "HAS_SSLV3_SERVER_METHOD"
	fi
	log_raw "Checking if SSLv2_server_method exists: "
	if test_c "#include <openssl/ssl.h>\nint main(int argc, char** argv){void* s = SSLv2_server_method;return 0;}"; then
		define "HAS_SSLV2_SERVER_METHOD"
	else
		undef "HAS_SSLV2_SERVER_METHOD"
	fi
else
	undef "HAS_OPENSSL"
fi

if [ ! "x$SSL" = "x" ]; then
	define "HAS_SSL"
else
	undef "HAS_SSL"
fi

log_raw "Checking if openlog exists: "
if test_c "#include <syslog.h>\nint main(int argc, char** argv){void* s = openlog;return 0;}"; then
	define "HAS_SYSLOG"
	log_raw "Checking if LOG_PID exists: "
	if test_c "#include <syslog.h>\nint main(int argc, char** argv){(void)LOG_PID;return 0;}"; then
		define "HAS_LOG_PID"
	else
		undef "HAS_LOG_PID"
	fi
	log_raw "Checking if LOG_PERROR exists: "
	if test_c "#include <syslog.h>\nint main(int argc, char** argv){(void)LOG_PERROR;return 0;}"; then
		define "HAS_LOG_PERROR"
	else
		undef "HAS_LOG_PERROR"
	fi
	log_raw "Checking if LOG_NEWS exists: "
	if test_c "#include <syslog.h>\nint main(int argc, char** argv){(void)LOG_NEWS;return 0;}"; then
		define "HAS_LOG_NEWS"
	else
		undef "HAS_LOG_NEWS"
	fi
	log_raw "Checking if LOG_USER exists: "
	if test_c "#include <syslog.h>\nint main(int argc, char** argv){(void)LOG_USER;return 0;}"; then
		define "HAS_LOG_USER"
	else
		undef "HAS_LOG_USER"
	fi
	log_raw "Checking if LOG_INFO exists: "
	if test_c "#include <syslog.h>\nint main(int argc, char** argv){(void)LOG_INFO;return 0;}"; then
		define "HAS_LOG_INFO"
	else
		undef "HAS_LOG_INFO"
	fi
	log_raw "Checking if LOG_NOTICE exists: "
	if test_c "#include <syslog.h>\nint main(int argc, char** argv){(void)LOG_NOTICE;return 0;}"; then
		define "HAS_LOG_NOTICE"
	else
		undef "HAS_LOG_NOTICE"
	fi
	log_raw "Checking if LOG_WARNING exists: "
	if test_c "#include <syslog.h>\nint main(int argc, char** argv){(void)LOG_WARNING;return 0;}"; then
		define "HAS_LOG_WARNING"
	else
		undef "HAS_LOG_WARNING"
	fi
else
	undef "HAS_SYSLOG"
	undef "HAS_LOG_PID"
	undef "HAS_LOG_PERROR"
	undef "HAS_LOG_NEWS"
	undef "HAS_LOG_USER"
	undef "HAS_LOG_INFO"
	undef "HAS_LOG_NOTICE"
	undef "HAS_LOG_WARNING"
fi

log_raw "Checking if fork exists: "
if test_c "#include <unistd.h>\nint main(int argc, char** argv){void* s = fork;return 0;}"; then
	define "HAS_FORK"
else
	undef "HAS_FORK"
fi

log_raw "Checking if uname exists: "
if test_c "#include <sys/utsname.h>\nint main(int argc, char** argv){void* s = uname;return 0;}"; then
	define "HAS_UNAME"
else
	undef "HAS_UNAME"
fi

echo "#define DEFINES {$DEFINES}" >> config.h

echo "#endif" >> config.h

log_raw "Finding Yacc: "
if [ "x$YACC" = "x" ]; then
	for i in byacc bison yacc; do
		OLDIFS="$IFS"
		IFS=":"
	
		for j in $PATH; do
			if [ -f $j/$i ]; then
				YACC=$j/$i
				break
			fi
		done
	
		IFS="$OLDIFS"
		if [ ! "x$YACC" = "x" ]; then
			break
		fi
	done
fi
if [ "x$YACC" = "x" ]; then
	echo "not found"
	quit
fi
echo "$YACC"

log_raw "Should I force -y to Yacc: "
echo "%%" > /tmp/test.y
echo "a: 'a'" >> /tmp/test.y
echo "%%" >> /tmp/test.y
$YACC -y /tmp/test.y >/dev/null 2>&1
if [ "$?" = "0" ]; then
	echo "yes"
	YACC="$YACC -y"
else
	echo "no"
fi
rm -f y.tab.c /tmp/test.y

log_raw "Finding Lex: "
if [ "x$LEX" = "x" ]; then
	for i in flex lex; do
		OLDIFS="$IFS"
		IFS=":"
	
		for j in $PATH; do
			if [ -f $j/$i ]; then
				LEX=$j/$i
				break
			fi
		done
	
		IFS="$OLDIFS"
		if [ ! "x$LEX" = "x" ]; then
			break
		fi
	done
fi
if [ "x$LEX" = "x" ]; then
	echo "not found"
	quit
fi
echo "$LEX"

echo "# This file is auto-generated" > config.mk
echo "CC = $CC" >> config.mk
echo "CFLAGS = $CFLAGS -ansi -O2 -DNEWSDIST_VERSION=\\\"$VERSION\\\" -DPREFIX=\\\"$PREFIX\\\"" >> config.mk
echo "LDFLAGS = $LDFLAGS -O2" >> config.mk
echo "LIBS = $LIBS" >> config.mk
echo "TOPDIR = `pwd`" >> config.mk
echo "EXEC = $EXEC" >> config.mk
echo "YACC = $YACC" >> config.mk
echo "LEX = $LEX" >> config.mk
echo "PREFIX = $PREFIX" >> config.mk

cp Makefile.in Makefile

log ""
log "Configuration successful, now run \`make'"
log ""

stty echo
